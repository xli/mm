#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

class MMLanguageParser < Racc::Parser

module_eval(<<'...end mml.grammar/module_eval...', 'mml.grammar', 122)

def unquote(value)
  case value
  when /^'(.*)'$/ then $1
  when /^"(.*)"$/ then $1
  else value
  end
end

def parse(str, runtime)
  @input = str.to_s
  tokens = []
  scanner = StringScanner.new(@input)
  
  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # ignore space
    when m = scanner.scan(/\d+\b/i)
      tokens.push [:NUMBER, m]
    when m = scanner.scan(/#\{[^}]*\}/)
      m =~ /#\{([^}]*)\}/
      if $1.nil? || $1.empty?
        raise '\'#{}\' is used to specify variable in the script, must have variable name specified'
      elsif runtime[$1.to_sym].nil?
        tokens.push [:IDENTIFIER, m]
      else
        tokens.push [:IDENTIFIER, runtime[$1.to_sym]]
      end
    when m = scanner.scan(/#\b/i)
      tokens.push [:CARD, m]
    when m = scanner.scan(/with\b/i)
      tokens.push [:WITH, m]
    when m = scanner.scan(/,/)
      tokens.push [:COMMA, m]
    when m = scanner.scan(/=>/)
      tokens.push [:MAP_TO, m]
    when m = scanner.scan(/=/)
      tokens.push [:EQUAL, m]
    when m = scanner.scan(/view\b/i)
      tokens.push [:VIEW, m]
    when m = scanner.scan(/\(([^\)]*)\)/)
      m =~ /\(([^\)]*)\)/
      tokens.push [:COMMENT, $1]
    when m = scanner.scan(/'([^']*)'/)
      tokens.push [:IDENTIFIER, unquote(m)]
    when m = scanner.scan(/"([^"]*)"/)
      tokens.push [:IDENTIFIER, unquote(m)]
    when m = scanner.scan(/`[^`]*`?/)
      m =~ /`([^`]*)`?/
      tokens.push [:SYSTEM_CMD, $1]
    when m = scanner.scan(/[\w]+/)
      tokens.push [:IDENTIFIER, m]
    else
      raise "unexpected characters #{scanner.peek(5)}"
    end
  end

  runtime[:context].push(tokens)
  
  tokens.push [false, false]
  yyparse(tokens, :each)
end

def on_error(error_token_id, error_value, value_stack)
  msg = "Could not parse MML: #{@input}, error_token_id: #{error_token_id}, error_value: #{error_value}"
  msg << "\nafter #{value_stack.last}" if value_stack.length > 1
  msg << "\n(This could be due to invalid formatting, including whitespace and indentation."
  msg << " Please check your MML statement and try again.)"
  raise ParseError, msg
end
...end mml.grammar/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,    25,    12,     2,    12,    36,    26,     5,     7,    35,
    23,    11,     1,    19,    12,    16,    17,    33,    34,    16,
    17,    16,    17,    49,    50,    16,    17,    16,    17,    16,
    17,    15,    14,    39,    40,    25,    43,    44,    45,    47,
    39,    12,    32 ]

racc_action_check = [
    10,    10,    14,     0,    12,    24,    10,     0,     0,    24,
    10,     0,     0,     5,     5,     4,     4,    19,    19,     7,
     7,     8,     8,    45,    45,    11,    11,    13,    13,    46,
    46,     3,     2,    25,    26,    27,    36,    38,    39,    41,
    44,     1,    15 ]

racc_action_pointer = [
     1,    35,    25,    31,     3,     8,   nil,     7,     9,   nil,
    -2,    13,    -2,    15,    -4,    42,   nil,   nil,   nil,    11,
   nil,   nil,   nil,   nil,    -3,    27,    22,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    28,    34,
   nil,    31,   nil,   nil,    34,    17,    17,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
   -33,   -33,   -33,   -33,   -19,   -31,   -24,   -19,   -19,    -5,
    -7,   -19,   -31,   -19,   -17,   -33,   -20,   -21,    -1,   -33,
   -32,    -8,    -4,    -6,   -33,   -33,   -33,   -13,    -3,    -2,
   -25,   -18,    52,   -22,   -23,   -11,   -33,   -26,   -27,   -33,
   -12,   -15,   -14,   -10,   -33,   -33,   -19,   -16,   -28,   -29,
   -30,    -9 ]

racc_goto_table = [
    18,    37,    24,    21,    22,     8,    10,    28,     9,    29,
     6,    13,    41,    46,     4,    27,    30,     3,   nil,    42,
    48,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51 ]

racc_goto_check = [
     3,    12,    10,     3,     3,     5,     7,     3,     6,     3,
     4,     4,     8,     9,     2,     5,    11,     1,   nil,    10,
    12,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,    17,    14,    -4,    10,     5,     8,     6,   -15,   -28,
    -8,     2,   -24,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    38 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 15, :_reduce_1,
  3, 15, :_reduce_2,
  2, 15, :_reduce_3,
  2, 15, :_reduce_4,
  1, 15, :_reduce_5,
  2, 15, :_reduce_6,
  1, 15, :_reduce_7,
  2, 15, :_reduce_8,
  5, 20, :_reduce_9,
  4, 20, :_reduce_10,
  3, 20, :_reduce_11,
  3, 20, :_reduce_12,
  0, 22, :_reduce_13,
  1, 22, :_reduce_none,
  0, 23, :_reduce_15,
  1, 23, :_reduce_16,
  0, 25, :_reduce_17,
  1, 25, :_reduce_18,
  0, 17, :_reduce_19,
  1, 17, :_reduce_20,
  1, 17, :_reduce_21,
  3, 16, :_reduce_22,
  3, 16, :_reduce_23,
  1, 21, :_reduce_24,
  3, 19, :_reduce_25,
  2, 24, :_reduce_26,
  1, 26, :_reduce_27,
  3, 26, :_reduce_28,
  3, 27, :_reduce_29,
  3, 27, :_reduce_30,
  1, 18, :_reduce_31,
  2, 18, :_reduce_32 ]

racc_reduce_n = 33

racc_shift_n = 52

racc_token_table = {
  false => 0,
  :error => 1,
  :CARD => 2,
  :WITH => 3,
  :MAP_TO => 4,
  :EQUAL => 5,
  :IDENTIFIER => 6,
  :NUMBER => 7,
  :COMMENT => 8,
  :COMMA => 9,
  :SYSTEM_CMD => 10,
  :VIEW => 11,
  :CARD_RESOURCE => 12,
  :VIEW_RESOURCE => 13 }

racc_nt_base = 14

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "CARD",
  "WITH",
  "MAP_TO",
  "EQUAL",
  "IDENTIFIER",
  "NUMBER",
  "COMMENT",
  "COMMA",
  "SYSTEM_CMD",
  "VIEW",
  "CARD_RESOURCE",
  "VIEW_RESOURCE",
  "$start",
  "target",
  "runtime_variable",
  "opt_workspace",
  "identifiers",
  "card",
  "transition",
  "command_name",
  "opt_user_entered_properties",
  "opt_comment",
  "user_entered_properties",
  "opt_attrs",
  "properties",
  "property" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'mml.grammar', 17)
  def _reduce_1(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 19)
  def _reduce_2(val, _values)
    MM::Console::View.new(val[1].join(' '))
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 21)
  def _reduce_3(val, _values)
    MM::Console::SystemCmd.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 23)
  def _reduce_4(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 25)
  def _reduce_5(val, _values)
    MM::Console::Transition.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 27)
  def _reduce_6(val, _values)
    MM::Console::CardResourceCommand.new(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 29)
  def _reduce_7(val, _values)
    MM::Console::NoResourceCommand.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 31)
  def _reduce_8(val, _values)
    MM::Console::SelectIndexCommand.new(val[0].to_i)
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 36)
  def _reduce_9(val, _values)
    {
      :command => val[0],
      :card_number => val[1].number,
      :properties => val[2],
      :comment => val[3]
    }
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 43)
  def _reduce_10(val, _values)
    {
      :command => val[0],
      :properties => val[1],
      :comment => val[2],
      :card_number => val[3].number
    }
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 50)
  def _reduce_11(val, _values)
    {
      :command => val[0],
      :properties => val[1],
      :card_number => val[2].number
    }
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 56)
  def _reduce_12(val, _values)
    {
      :command => val[0],
      :comment => val[1],
      :card_number => val[2].number
    }
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 64)
  def _reduce_13(val, _values)
     nil 
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'mml.grammar', 69)
  def _reduce_15(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 70)
  def _reduce_16(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 74)
  def _reduce_17(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 75)
  def _reduce_18(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 79)
  def _reduce_19(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 80)
  def _reduce_20(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 81)
  def _reduce_21(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 85)
  def _reduce_22(val, _values)
    MM::Console::RuntimeVariable.new(:name => val[0], :value => val[2])
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 86)
  def _reduce_23(val, _values)
    MM::Console::RuntimeVariable.new(:name => val[0], :value => val[2])
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 90)
  def _reduce_24(val, _values)
     val[0].join(" ") 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 94)
  def _reduce_25(val, _values)
     MM::Console::Card.new(val[1].to_i, val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 98)
  def _reduce_26(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 102)
  def _reduce_27(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 103)
  def _reduce_28(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 107)
  def _reduce_29(val, _values)
     { :name => val[0], :value => val[2] } 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 108)
  def _reduce_30(val, _values)
     { :name => val[0], :value => val[2] } 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 112)
  def _reduce_31(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'mml.grammar', 113)
  def _reduce_32(val, _values)
     [val[0]] + val[1] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class MMLanguageParser
